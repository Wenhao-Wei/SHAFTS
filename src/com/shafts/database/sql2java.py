# -*- coding: utf-8 -*-
import re,sys
tdict={
	'TINYINT':'Integer',
	'INT':'Integer',
	'CHAR':'String',
	'VARCHAR':'String',
	'TEXT':'String'
}
sdict={
	'Integer':'Int',
	'String':'String'
}
rfetch=re.compile(r'[\t ]+`([_\w]+)`[\t ]+([\w]+)\b.*$')
getcolumns=lambda s:[(mi.expand(r'\1').strip(),tdict[mi.expand(r'\2').strip()]) for mi in (rfetch.match(i) for i in s.split('\n')) if mi]
getmname=lambda s:s[0].upper()+s[1:] if len(s) else ''

def convert(classname,createstmt):
	cols=getcolumns(createstmt)

	print """//package ...;

import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * {0}
 * This class is automatically generated by 'sql2java.py'.
 * @author Alex
 */
public class {0} implements IConvertableFromResultSet{{""".format(classname)
	
	for col,t in cols:
		print """
	/**
	 * Field for column `{0}`.
	 */
	public {1} {0};""".format(col,t)

	print """
	/**
	 * Default constructor
	 */
	public {0}(){{ }}""".format(classname)

	print """
	/**
	 * Data from a ResultSet.
	 * @param rs the ResultSet
	 * @throws SQLException
	 */
	public {0}(ResultSet rs) throws SQLException{{ 
		this.fromResultSet(rs); 
	}}""".format(classname)

	print """
	/**
	 * Data from arguments."""

	for col,t in cols:
		print """	 * @param {0} Value for column `{0}`""".format(col)

	print """	 */
	public {0}(""".format(classname),

	print ', '.join('{0} {1}'.format(t,col) for col,t in cols),

	print """){"""

	for col,t in cols:
		print """		this.{0}={0};""".format(col)

	print """}"""

	for col,t in cols:
		print """
	/**
	 * Getter method for field `{0}`.
	 * @return Value for column `{0}`
	 */
	public {1} get{2}(){{
		return this.{0};
	}}
	
	/**
	 * Setter method for field `{0}`.
	 * @param v Value for column `{0}`
	 */
	public void set{2}({1} v){{
		this.{0}=v;
	}}""".format(col,t,getmname(col))

	print """
	public void fromResultSet(ResultSet r) throws SQLException{"""

	for i,col_t in enumerate(cols):
		col,t=col_t
		print """		this.{0}=r.get{1}({2});""".format(col,sdict[t],i+1)

	print """	}
}"""

	print """
/*Generator input:
{0}
*/""".format(createstmt)

if __name__ == '__main__':
	if len(sys.argv)==2: convert(sys.argv[1],sys.stdin.read())
	else:
		print '//Example'
		convert('UserInfo',"""CREATE TABLE `shafts_users` (
		  `id` INT UNSIGNED PRIMARY KEY NOT NULL AUTO_INCREMENT,
		  `userid` VARCHAR(255) NOT NULL UNIQUE,
		  `password` CHAR(32) NOT NULL,
		  `email` VARCHAR(255) NOT NULL DEFAULT "",
		  `unit` VARCHAR(255) NOT NULL DEFAULT "",
		  `group` VARCHAR(255) NOT NULL DEFAULT "",
		  `phone` VARCHAR(255) NOT NULL DEFAULT "",
		  `priv` VARCHAR(255) NOT NULL DEFAULT ""
		) ENGINE=InnoDB DEFAULT CHARSET=utf8;
		""")

